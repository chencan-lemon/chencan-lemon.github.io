<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven管理和构建项目</title>
    <url>/2020/07/10/Maven/</url>
    <content><![CDATA[<ol>
<li><p>Error:java: 不再支持源选项 5。请使用 6 或更高版本。</p>
<p>解决方法：</p>
<p>只对当前项目,在IEDA中</p>
<p>查看编译环境的JDK版本是否一致</p>
<p>File–&gt;Setting–&gt;Build,Execution,Deployment–&gt;Compiler–&gt;JavaCompiler</p>
<p>Project bytecode version:    11</p>
<p>Module                                            Target bytecode version</p>
<p>javaframework                                11</p>
</li>
</ol>
<p>   File–&gt;Project Settings–&gt;Project</p>
<p>   Project SDK:    11</p>
<p>   Project language level:    11</p>
<p>   File–&gt;Project Settings–&gt;Modules</p>
<p>   Sources    Language level:    11</p>
<p>   所有项目,在D:\soft\apache-maven-3.5.4\conf\settings.xml</p>
<p>   找到profiles标签，添加</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profile&gt;  </span><br><span class="line">		 &lt;id&gt;jdk-11.0.6&lt;&#x2F;id&gt;  </span><br><span class="line">		 &lt;activation&gt;  </span><br><span class="line">			 &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;  </span><br><span class="line">			 &lt;jdk&gt;11.0.6&lt;&#x2F;jdk&gt;  </span><br><span class="line">		 &lt;&#x2F;activation&gt;</span><br><span class="line">		 &lt;properties&gt;</span><br><span class="line">			 &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">			 &lt;maven.compiler.source&gt;11.0.6&lt;&#x2F;maven.compiler.source&gt;  </span><br><span class="line">			 &lt;maven.compiler.target&gt;11.0.6&lt;&#x2F;maven.compiler.target&gt;   </span><br><span class="line">		 &lt;&#x2F;properties&gt;   </span><br><span class="line">	 &lt;&#x2F;profile&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Cannot resolve plugin org.apache.maven.plugins:maven-jar-plugin:3.2.0</p>
<p>解决方法：</p>
<p>设置：File–&gt;Setting–&gt;Build,Execution,Deployment–&gt;Build Tools–&gt;Maven</p>
<p>Maven home directory:    D:/soft/apache-maven-3.5.4</p>
<p>User settings file:    D:\soft\apache-maven-3.5.4\conf\settings.xml        勾选Override</p>
<p>Local repository:    E:javaMvn    一般Maven home directory设置好了，这个就好了</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>IDEA Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware15.5.1下安装CentOS6.5</title>
    <url>/2020/08/10/VMware15.5.1%E4%B8%8B%E5%AE%89%E8%A3%85CentOS6.5/</url>
    <content><![CDATA[<h1 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h1><ol>
<li><p>运行VMware-workstation-full-15.5.1-15018445.exe</p>
</li>
<li><p>点击“创建新的虚拟机”，进入如下页面，勾选“自定义”，点击“下一步”</p>
</li>
<li><p>虚拟机硬件兼容性，默认，点击“下一步”</p>
</li>
<li><p>安装客户机操作系统，点击“安装程序光盘映像文件“</p>
<p>浏览：D:\VMware\VMware Workstation\CentOS-6.5-x86_64-minimal.iso</p>
</li>
<li><p>勾选“稍后安装操作系统”，点击“下一步”</p>
</li>
<li><p>客户机操作系统：Linux(L)，版本(V)：CentOS 6 64位</p>
</li>
<li><p>虚拟机名称：CentOS6_64，浏览：D:\Virtual Machines\CentOS6_64，点击“下一步”</p>
</li>
<li><p>处理器配置</p>
<p>1）处理器数量：2</p>
<p>2）每个处理器的内核数量：2</p>
</li>
<li><p>点击“下一步”</p>
</li>
<li><p>虚拟机的内存，此虚拟机的内存(M)：2048，点击“下一步”</p>
</li>
<li><p>勾选“使用网络地址转换(NAT)(E)”，点击“下一步”</p>
</li>
<li><p>I/O控制器类型，默认，点击“下一步”</p>
</li>
<li><p>磁盘类型，默认，点击“下一步”</p>
</li>
<li><p>勾选“创建新虚拟磁盘”，点击“下一步”</p>
</li>
<li><p>最大磁盘的大小：20.0，勾选“将虚拟机拆分成多个文件”，点击“下一步”</p>
</li>
<li><p>浏览：D:\Virtual Machines\CentOS6_64\CentOS6_64.vmdk，点击“下一步”</p>
</li>
<li><p>点击“完成”</p>
</li>
</ol>
<h1 id="安装CentOS6-5操作系统"><a href="#安装CentOS6-5操作系统" class="headerlink" title="安装CentOS6.5操作系统"></a>安装CentOS6.5操作系统</h1><ol>
<li>点击“CenOS6_64”，</li>
<li>点击“编辑虚拟机设置”</li>
<li>点击“新 CD/DVD(IDE)”，勾选“使用ISO映像文件”，浏览：D:\VMware\VMware Workstation\CentOS-6.5-x86_64-minimal.iso，点击”确定”</li>
<li>点击”开启此虚拟机“</li>
<li>开启后，第一项是“Install or upgrade an existing system”，默认，回车</li>
<li>按”tab“键，选中”Skip“按钮</li>
<li>点击”Next“</li>
<li>选中“English(English)”，点击”Next“</li>
<li>选中“U.S.English(English)”，点击”Next“</li>
<li>勾选“Basic Storage Devices”，点击”Next“</li>
<li>选中“Yes，discard any data”，点击”Next“</li>
<li>Hostname：VirtualMachine，点击”Next“</li>
<li>选中“Asia/Shanghai”，点击”Next“</li>
<li>填写 Root Password  Confirm，点击”Next“</li>
<li>勾选“Use Anyway”，点击”Next“</li>
<li>勾选“Create Custom Layout”，点击”Next“</li>
<li>创建boot分区：Create—&gt;勾选“Standard Partition”—&gt;Create–&gt;Mount Point：/boot  File System Type：ext4    Size：500 勾选“Fixed Size”—&gt;点击“OK”</li>
<li>创建swap分区：Create—&gt;勾选“Standard Partition”—&gt;Create–&gt;File System Type：swap  Size：2048 勾选“Fixed Size”—&gt;点击“OK”</li>
<li>创建根分区：创建swap分区：Create—&gt;勾选“Standard Partition”—&gt;Create–&gt;Mount Point：/  File System ext4  勾选“Fill to maximum allowable size”—&gt;点击“OK”</li>
<li>点击”Next“</li>
<li>选中“Format”，点击”Next“</li>
<li>选中“Write changes to disk”，点击”Next“</li>
<li>点击”Next“</li>
<li>开始安装CentOS界面，等待一段时间，安装完成后，点击“Reboot”</li>
<li>输入root的用户名，回车，输入密码</li>
</ol>
<h1 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h1><ol>
<li><p>点击“编辑虚拟机设置”</p>
</li>
<li><p>点击“网络适配器”—&gt;勾选“桥接模式”–&gt;点击”确定”</p>
</li>
<li><p>点击“编辑”—&gt;点击“虚拟网络编辑器”—&gt;选中“更改设置”—&gt;选中“WMnet0”—&gt;勾选“桥接模式” ，外部网络怎么怎么联网的，就桥接至哪里（笔记本连得WIFI,就选WIFI方式）点击”确定”</p>
</li>
<li><p>点击”开启此虚拟机“，登陆</p>
</li>
<li><p>编辑计算机名称、添加默认网关地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure>

<p>1）编辑模式：小写i</p>
<p>2）退出编辑模式：ESC键</p>
<p>3）保存并退出    “:wq”</p>
</li>
<li><p>编辑网络配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#BOOTPROTO&#x3D;dhcp</span><br><span class="line">BOOTPROTO&#x3D;static </span><br><span class="line">IPADDR&#x3D;192.168.0.66 #与宿主机在同一网段，地址不能相同</span><br><span class="line">NETMASK&#x3D;255.255.255.0 </span><br><span class="line">GATEWAY&#x3D;192.168.0.1 #与宿主机相同</span><br><span class="line">DNS1&#x3D;8.8.8.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加DNS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启网络</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 192.168.0.125 #虚拟机访问宿主机</span><br><span class="line">ping www.baidu.com #访问公网</span><br></pre></td></tr></table></figure>

<p>Linux中ping不会停止，需要使用Ctrl+C停止该命令</p>
</li>
</ol>
<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables status #查看防火墙的状态</span><br><span class="line">service iptables stop #关闭防火墙服务</span><br></pre></td></tr></table></figure>

<h1 id="禁止开机启动"><a href="#禁止开机启动" class="headerlink" title="禁止开机启动"></a>禁止开机启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig #查看iptables条目</span><br><span class="line">chkconfig iptable off #全部禁止启动</span><br></pre></td></tr></table></figure>

<h1 id="快照和克隆"><a href="#快照和克隆" class="headerlink" title="快照和克隆"></a>快照和克隆</h1><p>1、拍快照1：名称：初始状态，点击“拍摄快照”</p>
<p>2、查看快照1，点击“初始状态”，点击“克隆”</p>
<p>3、默认，一直点击“下一步”</p>
<p>4、虚拟机名称：node1，浏览：D:\Virtual Machines\node1，点击“完成”</p>
<p>5、克隆完成后，点击“关闭”</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>VMware15.5.1 CentOS6.5</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware的安装和彻底卸载</title>
    <url>/2020/08/09/VMware%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>运行VMware-workstation-full-15.5.1-15018445.exe，点击“下一步”</li>
<li>勾选“我接收许可协议中的条款(A)”,点击“下一步”</li>
<li>自定义安装，点击“更改”，文件夹名称：D:\VMware\VMware Workstation，点击“确定”</li>
<li>不断点击“下一步”</li>
<li>点击“安装”</li>
<li>点击“许可证”，输入许可证密钥</li>
<li>点击“完成”</li>
</ol>
<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol>
<li>运行VMware-workstation-full-15.5.1-15018445.exe，点击“下一步”</li>
<li>“删除”：从您的计算机中删除VMware Workstation Pro</li>
<li>不断“下一步”，点击“删除”，删除完成后，点击“完成”即可</li>
<li>注册表编辑器：Win+R快捷键，regedit</li>
<li>来到HKEY_CURRENT_USER/Software/VMware, Inc.    右键删除VMware, Inc.文件夹</li>
<li>来到D:\VMware，右键删除VMware文件夹</li>
<li>重启计算机</li>
</ol>
<h1 id="VMware15-5-1下安装CentOS6-5"><a href="#VMware15-5-1下安装CentOS6-5" class="headerlink" title="VMware15.5.1下安装CentOS6.5"></a>VMware15.5.1下安装CentOS6.5</h1><ol>
<li><p>运行VMware-workstation-full-15.5.1-15018445.exe</p>
</li>
<li><p>点击“创建新的虚拟机”，进入如下页面，勾选“典型(推荐)”，点击“下一步”</p>
</li>
<li><p>安装客户机操作系统，点击“安装程序光盘映像文件</p>
<p> 浏览：D:\VMware\VMware Workstation\CentOS-6.5-x86_64-minimal.iso</p>
</li>
<li><p>勾选“稍后安装操作系统”，点击“下一步”</p>
</li>
<li><p>客户机操作系统：Linux(L)，版本(V)：CentOS 6 64位</p>
</li>
<li><p>虚拟机名称：CentOS6_64，浏览：D:\Virtual Machines\CentOS6_64，点击“下一步”</p>
</li>
<li><p>最大磁盘的大小：20.0，勾选“将虚拟机拆分成多个文件”，点击“下一步”</p>
</li>
<li><p>点击“自定义硬件”</p>
</li>
<li><p>点击“内存”，此虚拟机的内存(M)：2048</p>
</li>
<li><p>点击“处理器”</p>
<p>1）处理器数量：2</p>
<p>2）每个处理器的内核数量：2</p>
</li>
<li><p>点击“新 CD/DVD(IDE)”，勾选“使用ISO映像文件”，浏览：D:\VMware\VMware Workstation\CentOS-6.5-x86_64-minimal.iso</p>
</li>
<li><p>点击“关闭”</p>
</li>
<li><p>点击“完成”</p>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Windows VMware15.5.1 CenOS6.X</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统下搭建个人博客</title>
    <url>/2020/07/08/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="安装Hexo框架https-hexo-io"><a href="#安装Hexo框架https-hexo-io" class="headerlink" title="安装Hexo框架https://hexo.io/"></a>安装Hexo框架<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></h1><h2 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h2><ol>
<li>下载Node.js  官网地址<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>  选择LTS长期支持版</li>
<li>下载git  官网地址<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></li>
</ol>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在刚才下载好的git文件下，找到git-bash.exe并运行，会弹出一个窗口，以下命令都在此窗口中操作</p>
<h3 id="借助淘宝的镜像"><a href="#借助淘宝的镜像" class="headerlink" title="借助淘宝的镜像"></a>借助淘宝的镜像</h3><p>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>$ cnpm install -g hexo</p>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>E:\blog\chencan，存放博客内容的地方</p>
<h3 id="初始化文件夹"><a href="#初始化文件夹" class="headerlink" title="初始化文件夹"></a>初始化文件夹</h3><h4 id="进入文件夹"><a href="#进入文件夹" class="headerlink" title="进入文件夹"></a>进入文件夹</h4><p>$ cd /e/blog/chencan</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>$ hexo init</p>
<h4 id="再一次安装hexo-会继续下载一些文件"><a href="#再一次安装hexo-会继续下载一些文件" class="headerlink" title="再一次安装hexo,会继续下载一些文件"></a>再一次安装hexo,会继续下载一些文件</h4><p>$ cnpm install</p>
<h4 id="生成站点"><a href="#生成站点" class="headerlink" title="生成站点"></a>生成站点</h4><p>$ hexo g</p>
<h4 id="启动站点"><a href="#启动站点" class="headerlink" title="启动站点"></a>启动站点</h4><p>$ hexo s</p>
<h4 id="在浏览器地址栏输入"><a href="#在浏览器地址栏输入" class="headerlink" title="在浏览器地址栏输入"></a>在浏览器地址栏输入</h4><p><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
<h1 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h1><h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><p>有则可以忽略</p>
<h2 id="创建GitHub仓库-repository"><a href="#创建GitHub仓库-repository" class="headerlink" title="创建GitHub仓库(repository)"></a>创建GitHub仓库(repository)</h2><p>仓库名称最好是GitHub用户名.github.io，为了以后可以直接使用</p>
<p><a href="http://chencan-lemon.github.io">http://chencan-lemon.github.io</a></p>
<p>访问博客</p>
<h2 id="SSH公钥和私钥"><a href="#SSH公钥和私钥" class="headerlink" title="SSH公钥和私钥"></a>SSH公钥和私钥</h2><p>运行git-bash.exe,使用$ cd~/.ssh查看本机是否存在ssh的密钥，如果第一次使用，那么会显示No such file or directory，</p>
<ul>
<li>这时输入</li>
</ul>
<p>​        $ ssh-keygen -t rsa -C “GitHub邮件地址” </p>
<p>​        会在C:\Users\lemon生成一个.ssh文件夹</p>
<ul>
<li>打开.ssh文件夹，将id_rsa.pub文件里的内容(密钥)拷贝到  GitHub个人主页</li>
</ul>
<p>​            –&gt;Settings–&gt;SSHand GPG keys –&gt;New SSH key–&gt;Key，</p>
<p>​            title随便填写，点击Add SSH key按钮，添加即可</p>
<ul>
<li>测试是否添加成功</li>
</ul>
<p>​         $ ssh -T <a href="mailto:git@github.com">git@github.com</a> # 注意邮箱地址不用改</p>
<p>​        提示Are you sure you want to continue connecting (yes/no)?，输入yes,会提示</p>
<p>​        Hi Sanarous! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
<p>​        说明SSH添加成功</p>
<ul>
<li>如果本机不是第一次使用git接github，则只需要测试SSH是否添加成功</li>
</ul>
<h2 id="Git提交的用户信息"><a href="#Git提交的用户信息" class="headerlink" title="Git提交的用户信息"></a>Git提交的用户信息</h2><p>$ git config – global user.name “GitHub用户名”</p>
<p>$ git config – global user.email “GitHub邮箱地址”</p>
<h1 id="通过Hexo框架将博客部署到GitHub上"><a href="#通过Hexo框架将博客部署到GitHub上" class="headerlink" title="通过Hexo框架将博客部署到GitHub上"></a>通过Hexo框架将博客部署到GitHub上</h1><h2 id="打开E-blog-chencan-config-yml的配置文件，找到deploy并补全"><a href="#打开E-blog-chencan-config-yml的配置文件，找到deploy并补全" class="headerlink" title="打开E:\blog\chencan_config.yml的配置文件，找到deploy并补全"></a>打开E:\blog\chencan_config.yml的配置文件，找到deploy并补全</h2><p>deploy:</p>
<pre><code>type: git</code></pre><p>​    repo: <a href="mailto:git@github.com">git@github.com</a>:GitHub用户名/GitHub用户名.github.io.git</p>
<p>​    branch: master</p>
<h2 id="运行git-bash-exe"><a href="#运行git-bash-exe" class="headerlink" title="运行git-bash.exe"></a>运行git-bash.exe</h2><p>$ cd /e/blog/chencan</p>
<h2 id="安装一个部署需要的插件"><a href="#安装一个部署需要的插件" class="headerlink" title="安装一个部署需要的插件"></a>安装一个部署需要的插件</h2><p>$ npm install hexo-deployer-git –save</p>
<h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>$ hexo clean</p>
<h3 id="本地生成博客"><a href="#本地生成博客" class="headerlink" title="本地生成博客"></a>本地生成博客</h3><p>$ hexo g</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>$ hexo deploy</p>
<h3 id="部署一篇新的博客"><a href="#部署一篇新的博客" class="headerlink" title="部署一篇新的博客"></a>部署一篇新的博客</h3><ol>
<li><p>$ hexo new post “文件名”</p>
</li>
<li><p>用对markdown件友好的编辑器对文章进行编辑，比如 MarkdowmPad、Typora等</p>
</li>
<li><p>$ hexo clean &amp;&amp; hexo g &amp;&amp;  deploy</p>
</li>
</ol>
<h3 id="部署完成后"><a href="#部署完成后" class="headerlink" title="部署完成后"></a>部署完成后</h3><p>在浏览器地址栏输入<a href="https://github.com/chencan-lemon/chencan-lemon.github.io" target="_blank" rel="noopener">https://github.com/chencan-lemon/chencan-lemon.github.io</a></p>
<p> 可以看到发布了的博客</p>
<h1 id="Hexo框架的Next主题"><a href="#Hexo框架的Next主题" class="headerlink" title="Hexo框架的Next主题"></a>Hexo框架的Next主题</h1><h2 id="在GitHub上搜索hexo-next"><a href="#在GitHub上搜索hexo-next" class="headerlink" title="在GitHub上搜索hexo-next"></a>在GitHub上搜索hexo-next</h2><h2 id="下载Next主题"><a href="#下载Next主题" class="headerlink" title="下载Next主题"></a>下载Next主题</h2><p>运行git-bash.exe</p>
<ol>
<li>$ cd /e/blog/chencan</li>
<li>$ git clone <a href="https://github.com/next-theme/hexo-theme-next" target="_blank" rel="noopener">https://github.com/next-theme/hexo-theme-next</a>  themes/next</li>
</ol>
<h2 id="配置博客主题为Next主题"><a href="#配置博客主题为Next主题" class="headerlink" title="配置博客主题为Next主题"></a>配置博客主题为Next主题</h2><p>打开E:\blog\chencan_config.yml的配置文件，将theme设置为next</p>
<h2 id="测试Next主题"><a href="#测试Next主题" class="headerlink" title="测试Next主题"></a>测试Next主题</h2><h3 id="清除缓存-1"><a href="#清除缓存-1" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>$ hexo clean</p>
<h3 id="本地生成博客-1"><a href="#本地生成博客-1" class="headerlink" title="本地生成博客"></a>本地生成博客</h3><p>$ hexo g</p>
<h3 id="启动站点-1"><a href="#启动站点-1" class="headerlink" title="启动站点"></a>启动站点</h3><p>$ hexo s</p>
<h3 id="在浏览器地址栏输入-1"><a href="#在浏览器地址栏输入-1" class="headerlink" title="在浏览器地址栏输入"></a>在浏览器地址栏输入</h3><p><a href="http://ocalhost:4000" target="_blank" rel="noopener">http://ocalhost:4000</a></p>
<h1 id="Hexo框架的设置"><a href="#Hexo框架的设置" class="headerlink" title="Hexo框架的设置"></a>Hexo框架的设置</h1><h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h2><p>E:\blog\chencan_config.xml</p>
<h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><p>E:\blog\chencan\themes_config.xml</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Win10 Hexo GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc</title>
    <url>/2020/07/24/springmvc/</url>
    <content><![CDATA[<ol>
<li><p>文件下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class downloadController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;download&quot;)</span><br><span class="line">    public ResponseEntity&lt;byte[]&gt; download(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;获取要下载文件的路径及输入流对象</span><br><span class="line">        ServletContext servletContext &#x3D; request.getServletContext();</span><br><span class="line">        String realPath &#x3D; servletContext.getRealPath(&quot;&#x2F;download&#x2F;filename&quot;);</span><br><span class="line">        FileInputStream fileInputStream &#x3D; new FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        byte[] bytes &#x3D; new byte[fileInputStream.available()];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        &#x2F;&#x2F;将要下载文件内容返回</span><br><span class="line">        HttpHeaders httpHeaders &#x3D; new HttpHeaders();</span><br><span class="line">        httpHeaders.set(&quot;Content-Disposition&quot;,&quot;attachment;filename&#x3D;filename&quot;);</span><br><span class="line">        return  new ResponseEntity&lt;byte[]&gt;(bytes,httpHeaders,HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件上传</p>
<p>1、Spring MVC 通过MultipartResolver，为文件上传提供了直接的支持；</p>
<p>2、Spring 用 Jakarta Commons FileUpload技术实现了一个 MultipartResolver 实现类：CommonsMultipartResovler；</p>
<p>3、Spring MVC 上下文中默认没有装配 MultipartResovler，如果想使用 Spring 的文件上传功能，需现在上下文中配置 MultipartResolver。</p>
<p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.fasterxml.jackson.core&#x2F;jackson-core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.fasterxml.jackson.core&#x2F;jackson-databind --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.fasterxml.jackson.core&#x2F;jackson-annotations --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;defaultEncoding&quot; value&#x3D;&quot;UTF-8&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxUploadSize&quot; value&#x3D;&quot;1024000&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>Apache组件</p>
<p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-io&#x2F;commons-io --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-fileupload&#x2F;commons-fileupload --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>单文件上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Upload &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;upload&quot;, method &#x3D; RequestMethod.POST)</span><br><span class="line">    public String testUpload(@RequestParam(value &#x3D; &quot;desc&quot;, required &#x3D; false) String desc, @RequestParam(&quot;file&quot;) MultipartFile multipartFile) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;desc : &quot; + desc);</span><br><span class="line">        System.out.println(&quot;OriginalFilename : &quot; + multipartFile.getOriginalFilename());</span><br><span class="line">        multipartFile.transferTo(new File(&quot;E:\\file\\&quot;+multipartFile.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        return &quot;success&quot;; &#x2F;&#x2F;增加成功页面: &#x2F;views&#x2F;success.jsp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多文件上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Upload &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;upload&quot;, method &#x3D; RequestMethod.POST)</span><br><span class="line">    public String testUpload(@RequestParam(value &#x3D; &quot;desc&quot;, required &#x3D; false) String desc, @RequestParam(&quot;file&quot;) MultipartFile[] multipartFile) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;desc : &quot; + desc);</span><br><span class="line">        for (MultipartFile file : multipartFile) &#123;</span><br><span class="line">            if (!file.isEmpty()) &#123;</span><br><span class="line">                System.out.println(&quot;OriginalFilename : &quot; + file.getOriginalFilename());</span><br><span class="line">                file.transferTo(new File(&quot;E:\\file\\&quot; + file.getOriginalFilename()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;success&quot;; &#x2F;&#x2F;增加成功页面: &#x2F;views&#x2F;success.jsp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li></li>
</ol>
]]></content>
      <categories>
        <category>javaframework</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>javaframework</title>
    <url>/2020/07/11/javaframework/</url>
    <content><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><ol>
<li><p>Autowired annotation should only be used on methods with parameters</p>
<p>@AutoWired注解不仅可以使用在成员变量上，也可以使用在方法上，但方法必须是有参数的。</p>
</li>
<li></li>
</ol>
<h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><ol>
<li><p>springboot整合mybatis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Loading class &#96;com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is &#96;com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure>

<p>solution:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>spring springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>乱码问题</title>
    <url>/2020/07/21/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>乱码问题解决：</p>
<p>  GET请求：在server.xml文件中，添加URIEncoding=“UTF-8”</p>
<p>  POST请求：编写过滤器进行实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">         &lt;!--解决post请求乱码--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">         &lt;!--解决响应乱码--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Problems</category>
      </categories>
  </entry>
  <entry>
    <title>英文</title>
    <url>/2020/07/09/%E8%8B%B1%E6%96%87/</url>
    <content><![CDATA[<ol>
<li>steal：偷窃</li>
<li>fix：固定、确定</li>
<li>inject：注入、注射</li>
<li>Artifact Coordinates：工件坐标系</li>
<li>Qualifier：限定符</li>
<li>invoke：调用    invocation</li>
<li>nested：嵌套的</li>
<li>requried：必需的</li>
<li>mandatory：强制的；托管的；命令的</li>
<li>resolver：解析器</li>
<li>candidate：候选 </li>
<li>delegate：委托</li>
<li>placeholder：占位符</li>
<li>processor：处理器；加工者</li>
<li>obtain：获得</li>
<li>internal：内部的       external：外部的</li>
<li>aware：意识到的；</li>
<li>enhancer：增强器</li>
<li>reactive：反应的；响应式</li>
<li>Front：前面</li>
<li>Dispatcher：调度器；分配器；      </li>
<li>DispatcherServlet：分发器；前端控制器；视图呈现概述；前置控制器</li>
<li>Distribution：分布</li>
<li>architecture：建筑；架构；建筑学；体系结构</li>
<li>module： 模块；组件；模数</li>
<li>profiles：配置文件；学院概况；轮廓；特征文件</li>
<li>Retention：保留；扣留，滞留；记忆力；闭尿；</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
</search>
